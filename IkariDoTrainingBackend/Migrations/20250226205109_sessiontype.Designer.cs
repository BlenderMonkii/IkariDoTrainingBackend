// <auto-generated />
using System;
using IkariDoTrainingBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IkariDoTrainingBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250226205109_sessiontype")]
    partial class sessiontype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Execution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext")
                        .HasColumnName("duration");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("Repetitions")
                        .HasColumnType("int")
                        .HasColumnName("repetitions");

                    b.Property<double?>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Executions");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Exercises.ExerciseBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_public");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<int?>("TimerId")
                        .HasColumnType("int")
                        .HasColumnName("timer_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TimerId");

                    b.ToTable("exercise_base", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<DateTime?>("SessionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("session_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.SessionExercise", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("session_id");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exercise_id");

                    b.Property<int?>("PauseTime")
                        .HasColumnType("int")
                        .HasColumnName("pause_time");

                    b.Property<int>("Sets")
                        .HasColumnType("int")
                        .HasColumnName("sets");

                    b.HasKey("SessionId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("session_exercises");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Timer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveTime")
                        .HasColumnType("int")
                        .HasColumnName("active_time");

                    b.Property<int?>("PauseTime")
                        .HasColumnType("int")
                        .HasColumnName("pause_time");

                    b.Property<int?>("Reps")
                        .HasColumnType("int")
                        .HasColumnName("reps");

                    b.Property<int?>("RestTime")
                        .HasColumnType("int")
                        .HasColumnName("rest_time");

                    b.Property<int?>("Sets")
                        .HasColumnType("int")
                        .HasColumnName("sets");

                    b.HasKey("Id");

                    b.ToTable("Timers");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.TrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("goal");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("training_plans");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.TrainingPlanSession", b =>
                {
                    b.Property<int>("TrainingPlanId")
                        .HasColumnType("int")
                        .HasColumnName("training_plan_id");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("session_id");

                    b.HasKey("TrainingPlanId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("training_plan_sessions", (string)null);
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Exercises.FingerboardExercise", b =>
                {
                    b.HasBaseType("IkariDoTrainingBackend.Models.Exercises.ExerciseBase");

                    b.Property<string>("BoardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("board_name");

                    b.Property<float>("EdgeSize")
                        .HasColumnType("float")
                        .HasColumnName("edge_size");

                    b.Property<string>("Fingers")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fingers");

                    b.Property<string>("GripType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("grip_type");

                    b.ToTable("fingerboard_exercises", (string)null);
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Execution", b =>
                {
                    b.HasOne("IkariDoTrainingBackend.Models.Exercises.ExerciseBase", "Exercise")
                        .WithMany("Executions")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Exercises.ExerciseBase", b =>
                {
                    b.HasOne("IkariDoTrainingBackend.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IkariDoTrainingBackend.Models.Timer", "Timer")
                        .WithMany()
                        .HasForeignKey("TimerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");

                    b.Navigation("Timer");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.SessionExercise", b =>
                {
                    b.HasOne("IkariDoTrainingBackend.Models.Exercises.ExerciseBase", "Exercise")
                        .WithMany("SessionExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IkariDoTrainingBackend.Models.Session", "Session")
                        .WithMany("SessionExercises")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.TrainingPlanSession", b =>
                {
                    b.HasOne("IkariDoTrainingBackend.Models.Session", "Session")
                        .WithMany("TrainingPlanSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IkariDoTrainingBackend.Models.TrainingPlan", "TrainingPlan")
                        .WithMany("TrainingPlanSessions")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Exercises.FingerboardExercise", b =>
                {
                    b.HasOne("IkariDoTrainingBackend.Models.Exercises.ExerciseBase", null)
                        .WithOne()
                        .HasForeignKey("IkariDoTrainingBackend.Models.Exercises.FingerboardExercise", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Exercises.ExerciseBase", b =>
                {
                    b.Navigation("Executions");

                    b.Navigation("SessionExercises");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.Session", b =>
                {
                    b.Navigation("SessionExercises");

                    b.Navigation("TrainingPlanSessions");
                });

            modelBuilder.Entity("IkariDoTrainingBackend.Models.TrainingPlan", b =>
                {
                    b.Navigation("TrainingPlanSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
